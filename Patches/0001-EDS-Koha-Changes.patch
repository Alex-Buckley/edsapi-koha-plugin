From fd8820469323566ba4607f749583ad971dec3d9f Mon Sep 17 00:00:00 2001
From: Liz Rea <liz@catalyst.net.nz>
Date: Tue, 2 Dec 2014 13:39:58 +1300
Subject: [PATCH 1/2] WR 233748 - Changes for EDS plugins

Reference: https://github.com/ebsco/edsapi-koha-plugin
---
 opac/opac-downloadcart.pl | 153 +++++++++++++++++++++++++++++++++++++++
 opac/opac-sendbasket.pl   | 179 +++++++++++++++++++++++++++++++++++++++++++++-
 2 files changed, 329 insertions(+), 3 deletions(-)

diff --git a/opac/opac-downloadcart.pl b/opac/opac-downloadcart.pl
index 12d6777..1706d0c 100755
--- a/opac/opac-downloadcart.pl
+++ b/opac/opac-downloadcart.pl
@@ -32,8 +32,20 @@ use C4::Record;
 use C4::Ris;
 use C4::Csv;
 use utf8;
+use Try::Tiny; # SM: EDS
+
 my $query = new CGI;
 
+#EDS patch START
+my $PluginDir = C4::Context->config("pluginsdir");
+$PluginDir = $PluginDir.'/Koha/Plugin/EDS';
+require $PluginDir.'/opac/eds-methods.pl';
+
+my $EDSConfig = decode_json(EDSGetConfiguration());
+#use Data::Dumper; die Dumper $EDSConfig->{cataloguedbid};
+
+#EDS patch END
+
 my ( $template, $borrowernumber, $cookie ) = get_template_and_user (
     {
         template_name   => "opac-downloadcart.tmpl",
@@ -65,6 +77,144 @@ if ($bib_list && $format) {
         foreach my $biblio (@bibs) {
 
             my $record = GetMarcBiblio($biblio, 1);
+			
+			
+			
+			#START EDS
+			if(eval{C4::Context->preference('EDSEnabled')}){
+			
+				if(!($biblio =~m/$EDSConfig->{cataloguedbid}/)){
+					my $EDSQuery = 'Retrieve?an='.$biblio;
+					$EDSQuery =~s/\|/\|dbid\=/g;
+					$record = decode_json(EDSSearch($EDSQuery,'n'));
+					#use Data::Dumper; die Dumper $record->{Record};
+					my $recordXML = '<?xml version="1.0" encoding="UTF-8"?> 
+								<record
+									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+									xsi:schemaLocation="http://www.loc.gov/MARC21/slim http://www.loc.gov/standards/marcxml/schema/MARC21slim.xsd"
+									xmlns="http://www.loc.gov/MARC21/slim">
+									 <leader>000000000000000000000000</leader>
+									';
+									
+					#Title
+					try{
+							my $EDSRecordTitle = $record->{Record}->{RecordInfo}->{BibRecord}->{BibEntity}->{Titles}[0]->{TitleFull};
+							$recordXML .= '  <datafield tag="245" ind1="0" ind2="0">
+												<subfield code="a" label="Titles">'.$EDSRecordTitle.'</subfield>
+											  </datafield>
+											  ';	
+					}catch{};
+					
+					#Subject
+					try{
+							my $EDSRecordSubjects = $record->{Record}->{RecordInfo}->{BibRecord}->{BibEntity}->{Subjects};
+							foreach my $EDSRecordSubject (@{$EDSRecordSubjects}){	
+								$recordXML .= '  <datafield tag="611" ind1="0" ind2="0">
+												<subfield code="a" label="Subject">'.$EDSRecordSubject->{SubjectFull}.'</subfield>
+											  </datafield>
+											  ';
+							}
+					}catch{};
+					
+					#Author
+					try{
+							my $EDSRecordAuthors = $record->{Record}->{RecordInfo}->{BibRecord}->{BibRelationships}->{HasContributorRelationships};
+							foreach my $EDSRecordAuthor (@{$EDSRecordAuthors}){	
+								$recordXML .= '  <datafield tag="100" ind1="0" ind2="0">
+												<subfield code="a" label="Subject">'.$EDSRecordAuthor->{PersonEntity}->{Name}->{NameFull}.'</subfield>
+											  </datafield>
+											  ';
+							}
+					}catch{};
+					
+					#URL
+					try{
+							my $EDSRecordURL = $record->{Record}->{PLink};
+							$recordXML .= '  <datafield tag="856" ind1="0" ind2="0">
+												<subfield code="u" label="Accession Number">'.$EDSRecordURL.'</subfield>
+												<subfield code="y" label="Accession Number">'.$EDSRecordURL.'</subfield>
+												<subfield code="z" label="Accession Number">'.$EDSRecordURL.'</subfield>
+											  </datafield>
+											  ';
+					}catch{};
+					
+					#Document Type - TODO needs work.
+					try{
+							my $EDSRecordType = $record->{Record}->{Header}->{PubType};
+							$recordXML .= '  <datafield tag="006" ind1="0" ind2="0">
+												<subfield code="a" label="Accession Number">'.$EDSRecordType.'</subfield>
+											  </datafield>
+											  ';
+							$recordXML .= '  <datafield tag="007" ind1="0" ind2="0">
+												<subfield code="a" label="Accession Number">'.$EDSRecordType.'</subfield>
+											  </datafield>
+											  ';
+							$recordXML .= '  <datafield tag="008" ind1="0" ind2="0">
+												<subfield code="a" label="Accession Number">'.$EDSRecordType.'</subfield>
+											  </datafield>
+											  ';
+					}catch{};
+					
+					#Identifiers: ISSN/ISBN
+					try{
+							my $EDSRecordIdentifiers = $record->{Record}->{RecordInfo}->{BibRecord}->{BibRelationships}->{IsPartOfRelationships}[0]->{BibEntity}->{Identifiers};
+	
+							foreach my $EDSRecordIdentifier (@{$EDSRecordIdentifiers}){	
+								if($EDSRecordIdentifier->{Type} =~m/issn/){
+									$recordXML .= '  <datafield tag="022" ind1="0" ind2="0">
+													<subfield code="a" label="ISSN">'.$EDSRecordIdentifier->{Value}.'</subfield>
+												  </datafield>
+												  ';	
+								}elsif($EDSRecordIdentifier->{Type} =~m/isbn/){
+									$recordXML .= '  <datafield tag="020" ind1="0" ind2="0">
+													<subfield code="a" label="ISSN">'.$EDSRecordIdentifier->{Value}.'</subfield>
+												  </datafield>
+												  ';	
+								}
+							}
+					}catch{};
+					
+					#Dates
+					#try{
+							my $EDSRecordDate = $record->{Record}->{RecordInfo}->{BibRecord}->{BibRelationships}->{IsPartOfRelationships}[0]->{BibEntity}->{Dates}[0];
+							#use Data::Dumper; die Dumper $EDSRecordDate;
+							$recordXML .= '<datafield tag="260" ind1=" " ind2=" ">
+												<subfield code="c">'.$EDSRecordDate->{Y}.'</subfield>
+											</datafield>
+											  ';	
+					#}catch{};				
+					
+	
+					
+					#Accession Number
+					try{
+							my $EDSRecordAN = $record->{Record}->{Header}->{DbId}.'.'.$record->{Record}->{Header}->{An};
+							$recordXML .= '  <datafield tag="999" ind1="0" ind2="0">
+												<subfield code="c" label="Accession Number">'.$EDSRecordAN.'</subfield>
+												<subfield code="d" label="Accession Number">'.$EDSRecordAN.'</subfield>
+											  </datafield>
+											  ';
+					}catch{};
+													
+					
+					
+					$recordXML .= '</record>';
+					$recordXML=~s/\&/and/g; # avoid error when converting to marc
+					#use Data::Dumper; die Dumper $recordXML;
+					
+					#$record = $recordXML;
+					
+					$record = eval { MARC::Record::new_from_xml( $recordXML, "utf8", C4::Context->preference('marcflavour') ) };
+				}
+				#use Data::Dumper; die Dumper $record;
+			
+			}#STOP EDS
+			
+			
+			
+			
+			
+
             next unless $record;
 
             if ($format eq 'iso2709') {
@@ -77,7 +227,9 @@ if ($bib_list && $format) {
                 $output .= marc2bibtex($record, $biblio);
             }
         }
+		
     }
+#use Data::Dumper; die Dumper $output;
 
     # If it was a CSV export we change the format after the export so the file extension is fine
     $format = "csv" if ($format =~ m/^\d+$/);
@@ -93,3 +245,4 @@ if ($bib_list && $format) {
     $template->param(bib_list => $bib_list); 
     output_html_with_http_headers $query, $cookie, $template->output;
 }
+
diff --git a/opac/opac-sendbasket.pl b/opac/opac-sendbasket.pl
index 5821bea..8b8b840 100755
--- a/opac/opac-sendbasket.pl
+++ b/opac/opac-sendbasket.pl
@@ -33,9 +33,20 @@ use C4::Auth;
 use C4::Output;
 use C4::Biblio;
 use C4::Members;
+use Try::Tiny; # SM: EDS
+use JSON qw/decode_json encode_json/; # SM: EDS
 
 my $query = new CGI;
 
+#EDS patch START
+my $PluginDir = C4::Context->config("pluginsdir");
+$PluginDir = $PluginDir.'/Koha/Plugin/EDS';
+require $PluginDir.'/opac/eds-methods.pl';
+
+my $EDSConfig = decode_json(EDSGetConfiguration());
+
+#EDS patch END
+
 my ( $template, $borrowernumber, $cookie ) = get_template_and_user (
     {
         template_name   => "opac-sendbasketform.tmpl",
@@ -50,6 +61,9 @@ my $bib_list     = $query->param('bib_list');
 my $email_add    = $query->param('email_add');
 my $email_sender = $query->param('email_sender');
 
+
+
+
 my $dbh          = C4::Context->dbh;
 
 if ( $email_add ) {
@@ -88,6 +102,149 @@ if ( $email_add ) {
 
         my $dat              = GetBiblioData($biblionumber);
         my $record           = GetMarcBiblio($biblionumber);
+		
+		
+		
+		
+			#START EDS - based - code from downloadcart.pl
+			if(eval{C4::Context->preference('EDSEnabled')}){
+			
+				if(!($biblionumber =~m/$EDSConfig->{cataloguedbid}/)){
+					my $EDSQuery = 'Retrieve?an='.$biblionumber;
+					$EDSQuery =~s/\|/\|dbid\=/g;
+					$record = decode_json(EDSSearch($EDSQuery,'n'));
+					my $recordJSON = "{";
+					my $recordXML = '<?xml version="1.0" encoding="UTF-8"?> 
+								<record
+									xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+									xsi:schemaLocation="http://www.loc.gov/MARC21/slim http://www.loc.gov/standards/marcxml/schema/MARC21slim.xsd"
+									xmlns="http://www.loc.gov/MARC21/slim">
+									 <leader>000000000000000000000000</leader>
+									';
+									
+					#Title
+					try{
+							my $EDSRecordTitle = $record->{Record}->{RecordInfo}->{BibRecord}->{BibEntity}->{Titles}[0]->{TitleFull};
+							$recordXML .= '  <datafield tag="245" ind1="0" ind2="0">
+												<subfield code="a" label="Titles">'.$EDSRecordTitle.'</subfield>
+											  </datafield>
+											  ';	
+							$recordJSON .= '"title":"'.$EDSRecordTitle.'",';
+					}catch{};
+					
+					#Subject
+					try{
+							my $EDSRecordSubjects = $record->{Record}->{RecordInfo}->{BibRecord}->{BibEntity}->{Subjects};
+							foreach my $EDSRecordSubject (@{$EDSRecordSubjects}){	
+								$recordXML .= '  <datafield tag="611" ind1="0" ind2="0">
+												<subfield code="a" label="Subject">'.$EDSRecordSubject->{SubjectFull}.'</subfield>
+											  </datafield>
+											  ';
+							}
+					}catch{};
+					
+					#Author
+					try{
+							my $EDSRecordAuthors = $record->{Record}->{RecordInfo}->{BibRecord}->{BibRelationships}->{HasContributorRelationships};
+							foreach my $EDSRecordAuthor (@{$EDSRecordAuthors}){	
+								$recordXML .= '  <datafield tag="100" ind1="0" ind2="0">
+												<subfield code="a" label="Subject">'.$EDSRecordAuthor->{PersonEntity}->{Name}->{NameFull}.'</subfield>
+											  </datafield>
+											  ';
+								$recordJSON .= '"author":"'.$EDSRecordAuthor->{PersonEntity}->{Name}->{NameFull}.'",';
+							}
+					}catch{};
+					
+					#URL
+					try{
+							my $EDSRecordURL = $record->{Record}->{PLink};
+							$recordXML .= '  <datafield tag="856" ind1="0" ind2="0">
+												<subfield code="u" label="Accession Number">'.$EDSRecordURL.'</subfield>
+												<subfield code="y" label="Accession Number">'.$EDSRecordURL.'</subfield>
+												<subfield code="z" label="Accession Number">'.$EDSRecordURL.'</subfield>
+											  </datafield>
+											  ';
+					}catch{};
+					
+					#Document Type - TODO needs work.
+					try{
+							my $EDSRecordType = $record->{Record}->{Header}->{PubType};
+							$recordXML .= '  <datafield tag="006" ind1="0" ind2="0">
+												<subfield code="a" label="Accession Number">'.$EDSRecordType.'</subfield>
+											  </datafield>
+											  ';
+							$recordXML .= '  <datafield tag="007" ind1="0" ind2="0">
+												<subfield code="a" label="Accession Number">'.$EDSRecordType.'</subfield>
+											  </datafield>
+											  ';
+							$recordXML .= '  <datafield tag="008" ind1="0" ind2="0">
+												<subfield code="a" label="Accession Number">'.$EDSRecordType.'</subfield>
+											  </datafield>
+											  ';
+					}catch{};
+					
+					#Identifiers: ISSN/ISBN
+					try{
+							my $EDSRecordIdentifiers = $record->{Record}->{RecordInfo}->{BibRecord}->{BibRelationships}->{IsPartOfRelationships}[0]->{BibEntity}->{Identifiers};
+	
+							foreach my $EDSRecordIdentifier (@{$EDSRecordIdentifiers}){	
+								if($EDSRecordIdentifier->{Type} =~m/issn/){
+									$recordJSON .= '"issn":"'.$EDSRecordIdentifier->{Value}.'",';
+									$recordXML .= '  <datafield tag="022" ind1="0" ind2="0">
+													<subfield code="a" label="ISSN">'.$EDSRecordIdentifier->{Value}.'</subfield>
+												  </datafield>
+												  ';	
+								}elsif($EDSRecordIdentifier->{Type} =~m/isbn/){
+									$recordJSON .= '"isbn":"'.$EDSRecordIdentifier->{Value}.'",';
+									$recordXML .= '  <datafield tag="020" ind1="0" ind2="0">
+													<subfield code="a" label="ISSN">'.$EDSRecordIdentifier->{Value}.'</subfield>
+												  </datafield>
+												  ';	
+								}
+							}
+					}catch{};
+					
+					#Dates
+					try{
+							my $EDSRecordDate = $record->{Record}->{RecordInfo}->{BibRecord}->{BibRelationships}->{IsPartOfRelationships}[0]->{BibEntity}->{Dates}[0];
+							$recordJSON .= '"copyrightdate":"'.$EDSRecordDate->{Y}.'",';
+							$recordXML .= '<datafield tag="260" ind1=" " ind2=" ">
+												<subfield code="c">'.$EDSRecordDate->{Y}.'</subfield>
+											</datafield>
+											  ';	
+					}catch{};				
+					
+	
+					
+					#Accession Number
+					try{
+							my $EDSRecordAN = $record->{Record}->{Header}->{DbId}.'.'.$record->{Record}->{Header}->{An};
+							$recordJSON .= '"biblioitemnumber":"'.$EDSRecordAN.'"';
+							$recordXML .= '  <datafield tag="999" ind1="0" ind2="0">
+												<subfield code="c" label="Accession Number">'.$EDSRecordAN.'</subfield>
+												<subfield code="d" label="Accession Number">'.$EDSRecordAN.'</subfield>
+											  </datafield>
+											  ';
+					}catch{};
+													
+					
+					$recordJSON .= "}";
+					$recordXML .= '</record>';
+					$recordXML=~s/\&/and/g; # avoid error when converting to marc
+					$dat = decode_json($recordJSON);
+					
+					$record = eval { MARC::Record::new_from_xml( $recordXML, "utf8", C4::Context->preference('marcflavour') ) };
+				}
+			
+			}#STOP EDS		
+		
+		
+		
+		
+		
+		
+		
+		
         my $marcnotesarray   = GetMarcNotes( $record, $marcflavour );
         my $marcauthorsarray = GetMarcAuthors( $record, $marcflavour );
         my $marcsubjctsarray = GetMarcSubjects( $record, $marcflavour );
@@ -98,7 +255,6 @@ if ( $email_add ) {
         if($dat->{'author'} || @$marcauthorsarray) {
           $hasauthors = 1;
         }
-	
 
         $dat->{MARCNOTES}      = $marcnotesarray;
         $dat->{MARCSUBJCTS}    = $marcsubjctsarray;
@@ -109,10 +265,12 @@ if ( $email_add ) {
 
         $iso2709 .= $record->as_usmarc();
 
+
         push( @results, $dat );
     }
 
     my $resultsarray = \@results;
+	
     
     $template2->param(
         BIBLIO_RESULTS => $resultsarray,
@@ -125,6 +283,19 @@ if ( $email_add ) {
     # Getting template result
     my $template_res = $template2->output();
     my $body;
+	
+	
+	foreach my $biblionumber (@bibs) { # SM: EDS	
+		if(!($biblionumber =~m/$EDSConfig->{cataloguedbid}/)){
+		
+			$biblionumber =~s/\|/\&dbid\=/;
+			$template_res =~s/\|/\&dbid\=/;
+			$template_res =~s/\/cgi\-bin\/koha\/opac-detail\.pl\?biblionumber\=$biblionumber/\/plugin\/Koha\/Plugin\/EDS\/opac\/eds-detail.pl\?q\=Retrieve\?an\=$biblionumber/; 
+		}else{
+			$template_res =~s/\|$EDSConfig->{cataloguedbid}//;
+		}		
+	}
+	$template_res =~s/\&dbid/\|dbid/g;
 
     # Analysing information and getting mail properties
 
@@ -150,7 +321,8 @@ if ( $email_add ) {
     if ( $template_res =~ /<MESSAGE>(.*)<END_MESSAGE>/s ) {
         $body = $1;
         $body =~ s|\n?(.*)\n?|$1|;
-        $body = encode_qp($body);
+        #$body = encode_qp($body);
+		$body = $body;
     }
 
     $mail{body} = $body;
@@ -176,7 +348,7 @@ Content-Disposition: attachment; filename="basket.iso2709"
 $isofile
 $boundary--
 END_OF_BODY
-
+#use Data::Dumper; die Dumper %mail;
     # Sending mail (if not empty basket)
     if ( defined($iso2709) && sendmail %mail ) {
     # do something if it works....
@@ -200,3 +372,4 @@ else {
     );
     output_html_with_http_headers $query, $cookie, $template->output;
 }
+
-- 
1.9.1

